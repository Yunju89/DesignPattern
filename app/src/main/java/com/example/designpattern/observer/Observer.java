package com.example.designpattern.observer;

public interface Observer {
    void update(int number);
}

/**
 * 1. 옵저버 인터페이스의 역할 : 옵저버 업데이트 메소드를 통해서 숫자파라미터를 받는다.
 * 2. 넘버옵저버 : 옵저버 인터페이스를 상속 받아서 업데이트 메소드를 통해서 들어온 넘버제너레이터에서 넘겨준 수를 로그로 찍는 역할
 * 3. 그래프옵저버 : 옵저버 인터페이스를 상속 받아서 업데이트 메소드를 통해서 들어온 넘버제너레이터에서 넘겨준 수의 갯수만큼 별 로그를 찍는 역할
 * 4. 넘버제너레이터 : 옵저버 인터페이스 객체 리스트를 가지고, 알림을 보내주는 역할을 하는 클래스
 *
 *
 * 옵저버 패턴을 사용하기 위해서, 옵저버인터페이스를 생성, 옵저버 인터페이스는 업데이트 메소드의 파라미터로 int 값을 받는다.
 * 넘버옵저버, 그래프옵저버는 옵저버 인터페이스를 상속 받아서 오버라이드 메소드를 통해 각각 숫자와 숫자 갯수만큼의 별을 로그로 찍었다.
 *
 * 넘버제네러이터 클래스는 옵저버 리스트를 가지고 있고, (옵저버상속받은 애들을 한번에 실행시키고 싶어서)
 * 애드, 델리트 메소드로 리스트 추가 삭제를 하고,
 *
 * 노티파이옵저버 메소드 - 리스트에 있는 옵저버를 꺼내와서 (Iterator 로 꺼내서 while 로 돌리기 -> for 문으로 변경)
 * 그 옵저버 리스트에 랜덤으로 생성한 숫자를 넘겨주기.
 *
 * 액티비티에서 넘버 제너레이터에 위에서 구현한 넘버옵저버, 그래프옵저버를 넘겨주고 익스큐트 메소드 실행.
 */